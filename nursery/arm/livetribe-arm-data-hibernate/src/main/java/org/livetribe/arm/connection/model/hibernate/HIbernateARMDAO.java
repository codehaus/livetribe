/**
 *
 * Copyright 2006 (C) The original author or authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.livetribe.arm.connection.model.hibernate;

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;

import org.springframework.dao.DataAccessException;
import org.springframework.orm.hibernate3.support.HibernateDaoSupport;
import org.hibernate.ObjectNotFoundException;

import org.livetribe.arm.connection.model.ARMDAO;
import org.livetribe.arm.connection.model.ApplicationDefinition;
import org.livetribe.arm.connection.model.IdentityProperties;
import org.livetribe.arm.connection.model.ARMDAOException;


/**
 * @version $Revision$ $Date$
 */
public class HibernateARMDAO extends HibernateDaoSupport implements ARMDAO
{
    public ApplicationDefinition getApplicationDefinitionByName(String name, IdentityProperties identityProperties)
    {
        return null;  //todo: consider this autogenerated code
    }

    public ApplicationDefinition getApplicationDefinitionById(byte[] id)
    {
        return (ApplicationDefinition) getHibernateTemplate().load(ApplicationDefinition.class, new Integer(1));
    }

    public void saveApplicaitonDefinition(ApplicationDefinition applicationDefinition)
    {
        //todo: consider this autogenerated code
    }

    public void deleteApplicaitonDefinition(ApplicationDefinition applicationDefinition)
    {
        //todo: consider this autogenerated code
    }

    public List getIdentityPropertiesByName(String[] idNames, String[] idValues, String[] ctxNames)
    {
        idNames = cleanParams(idNames);
        idValues = cleanParams(idValues);
        ctxNames = cleanParams(ctxNames);

        boolean first = true;
        StringBuffer query = new StringBuffer();

        query.append("from IdentityProperties idp where");

        DecimalFormat dec = new DecimalFormat();
        dec.setMinimumIntegerDigits(2);

        ArrayList names = new ArrayList();
        ArrayList values = new ArrayList();
        int length = Math.min(20, Math.min(idNames.length, idValues.length));
        for (int i = 0; i < length; i++)
        {
            String index = dec.format(i + 1);

            if ((idNames[i] != null && idNames[i].trim().length() > 0)
                && (idValues[i] != null && idValues[i].trim().length() > 0))
            {
                if (!first) query.append(" and");
                else first = false;

                String idName = "IDN" + index;
                String idValue = "IDV" + index;

                names.add(idName);
                values.add(idNames[i]);
                query.append(" idp.idName").append(index).append("=:").append(idName);

                names.add(idValue);
                values.add(idValues[i]);
                query.append(" and idp.idValue").append(index).append("=:").append(idValue);
            }
        }

        for (int i = 0; i < ctxNames.length; i++)
        {
            String index = dec.format(i + 1);

            if ((ctxNames[i] != null && ctxNames[i].trim().length() > 0))
            {
                if (!first) query.append(" and");
                else first = false;

                String ctxName = "CTX" + index;

                names.add(ctxName);
                values.add(ctxNames[i]);
                query.append(" idp.ctxName").append(index).append("=:").append(ctxName);
            }
        }


        try
        {
            return getHibernateTemplate().findByNamedParam(query.toString(),
                                                           (String[]) names.toArray(new String[names.size()]),
                                                           values.toArray());
        }
        catch (DataAccessException dae)
        {
            throw new ARMDAOException(dae);
        }
    }

    public IdentityProperties getIdentityPropertiesByOID(Long oid)
    {
        if (oid == null) throw new IllegalArgumentException("OID is null");

        try
        {
            return (IdentityProperties) getHibernateTemplate().load(IdentityProperties.class, oid);
        }
        catch (DataAccessException dae)
        {
            if (dae.getCause() instanceof ObjectNotFoundException) return null;
            else throw new ARMDAOException(dae);
        }
    }

    public void saveIdentityProperties(IdentityProperties identityProperties)
    {
        if (identityProperties == null) throw new IllegalArgumentException("IdentityProperties is null");

        try
        {
            getHibernateTemplate().saveOrUpdate(identityProperties);
        }
        catch (DataAccessException dae)
        {
                throw new ARMDAOException(dae);
        }
    }

    public void deleteIdentityProperties(IdentityProperties identityProperties)
    {
        if (identityProperties == null) throw new IllegalArgumentException("IdentityProperties is null");

        try
        {
            getHibernateTemplate().delete(identityProperties);
        }
        catch (DataAccessException dae)
        {
            throw new ARMDAOException(dae);
        }
    }

    private static String[] cleanParams(String[] params)
    {
        if (params == null) return new String[0];
        else return params;
    }
}

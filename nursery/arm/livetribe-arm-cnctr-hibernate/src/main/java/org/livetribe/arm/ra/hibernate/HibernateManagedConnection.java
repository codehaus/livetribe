/**
 *
 * Copyright 2006 (C) The original author or authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.livetribe.arm.ra.hibernate;

import javax.resource.ResourceException;
import javax.resource.spi.ConnectionEvent;
import javax.resource.spi.ConnectionEventListener;
import javax.resource.spi.ConnectionRequestInfo;
import javax.resource.spi.LocalTransaction;
import javax.resource.spi.ManagedConnection;
import javax.resource.spi.ManagedConnectionMetaData;
import javax.security.auth.Subject;
import javax.transaction.xa.XAResource;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;

import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;


/**
 * @version $Revision$ $Date$
 */
class HibernateManagedConnection implements ManagedConnection
{
    private final Subject subject;
    private final HibernateConnectionRequestInfo info;
    private SessionFactory sessionFactory;
    private final List listeners = new ArrayList();
    private final List handles = new ArrayList();
    private PrintWriter logWriter;
    private boolean destroyed;

    HibernateManagedConnection(Subject subject, HibernateConnectionRequestInfo info)
    {
        this.subject = subject;
        this.info = new HibernateConnectionRequestInfo(info);

        Properties props = new Properties();

        props.put("hibernate.dialect", info.getDialect());
        props.put("hibernate.connection.driver_class", info.getDriverClass());
        props.put("hibernate.connection.url", info.getUrl());
        props.put("hibernate.connection.username", info.getUsername());
        props.put("hibernate.connection.password", info.getPassword());
        props.put("hibernate.connection.pool_size", info.getPoolSize());
        props.put("hibernate.connection.autocommit", "false");
        props.put("hibernate.cache.provider_class", info.getCacheProviderClass());
        props.put("hibernate.hbm2ddl.auto", "create-drop");  // TODO -  remove this after testing
        props.put("hibernate.show_sql", "true");  // TODO -  remove this after testing

        try
        {
            sessionFactory = new Configuration()
                    .addProperties(props)
                    .addResource("ARMMessages.hbm.xml")
                    .buildSessionFactory();
        }
        catch (Throwable ex)
        {
            throw new ExceptionInInitializerError(ex);
        }
    }

    public Object getConnection(Subject subject, ConnectionRequestInfo connectionRequestInfo) throws ResourceException
    {
        Object handle = new ConnectionHandle(this, sessionFactory.openSession());

        handles.add(handle);

        return handle;
    }

    public XAResource getXAResource() throws ResourceException
    {
        return null;  //todo: consider this autogenerated code
    }

    public LocalTransaction getLocalTransaction() throws ResourceException
    {
        return null;  //todo: consider this autogenerated code
    }

    /**
     * TODO - Remove hard coded values
     *
     * @return
     * @throws ResourceException
     */
    public ManagedConnectionMetaData getMetaData() throws ResourceException
    {
        return new ManagedConnectionMetaData()
        {
            public String getEISProductName() throws ResourceException
            {
                if (destroyed) throw new ResourceException("Not connected.");
                return "LiveTribe Hybernate Resource Adapter";
            }

            public String getEISProductVersion() throws ResourceException
            {
                if (destroyed) throw new ResourceException("Not connected.");
                return "1.0";
            }

            public int getMaxConnections() throws ResourceException
            {
                if (destroyed) throw new ResourceException("Not connected.");
                return Integer.MAX_VALUE;
            }

            public String getUserName() throws ResourceException
            {
                if (destroyed) throw new ResourceException("Not connected.");
                return subject.toString();
            }
        };
    }

    public void setLogWriter(PrintWriter printWriter) throws ResourceException
    {
        logWriter = printWriter;
    }

    public PrintWriter getLogWriter() throws ResourceException
    {
        return logWriter;
    }

    public void destroy() throws ResourceException
    {
        if (destroyed) return;

        cleanup();

        destroyed = true;
    }

    public void cleanup() throws ResourceException
    {
        Iterator iterator = handles.iterator();
        while (iterator.hasNext())
        {
            ConnectionHandle handle = (ConnectionHandle) iterator.next();
            handle.close();
        }
        handles.clear();
    }

    public void associateConnection(Object object) throws ResourceException
    {
        if (object instanceof ConnectionHandle)
        {
            ConnectionHandle handle = (ConnectionHandle) object;
            HibernateManagedConnection owner = handle.getOwner();

            owner.removeConnection(handle);

            handles.add(handle);
        }
        else
        {
            throw new ResourceException("Unable to associate an object instance of " + object.getClass().getName());
        }
    }

    public void addConnectionEventListener(ConnectionEventListener connectionEventListener)
    {
        listeners.add(connectionEventListener);
    }

    public void removeConnectionEventListener(ConnectionEventListener connectionEventListener)
    {
        listeners.remove(connectionEventListener);
    }

    void removeConnection(ConnectionHandle handle)
    {
        handles.remove(handle);
    }

    boolean matches(Subject subject, ConnectionRequestInfo info)
    {
        if (info == null) return false;
        if (info.getClass() != HibernateConnectionRequestInfo.class) return false;

        if (subject == null ^ this.subject == null) return false;
        if (subject != null && !subject.equals(this.subject)) return false;

        return info.equals(this.info);
    }

    void fireBeginEvent()
    {
        ConnectionEvent event = new ConnectionEvent(this, ConnectionEvent.LOCAL_TRANSACTION_STARTED);
        Iterator iterator = listeners.iterator();
        while (iterator.hasNext())
        {
            ConnectionEventListener listener = (ConnectionEventListener) iterator.next();
            listener.localTransactionStarted(event);
        }
    }

    void fireCommitEvent()
    {
        ConnectionEvent event = new ConnectionEvent(this, ConnectionEvent.LOCAL_TRANSACTION_COMMITTED);
        Iterator iterator = listeners.iterator();
        while (iterator.hasNext())
        {
            ConnectionEventListener listener = (ConnectionEventListener) iterator.next();
            listener.localTransactionCommitted(event);
        }
    }

    void fireRollbackEvent()
    {
        ConnectionEvent event = new ConnectionEvent(this, ConnectionEvent.LOCAL_TRANSACTION_ROLLEDBACK);
        Iterator iterator = listeners.iterator();
        while (iterator.hasNext())
        {
            ConnectionEventListener listener = (ConnectionEventListener) iterator.next();
            listener.localTransactionRolledback(event);
        }
    }

    void fireCloseEvent(ConnectionHandle handle)
    {
        ConnectionEvent event = new ConnectionEvent(this, ConnectionEvent.CONNECTION_CLOSED);
        event.setConnectionHandle(handle);

        Iterator iterator = listeners.iterator();
        while (iterator.hasNext())
        {
            ConnectionEventListener listener = (ConnectionEventListener) iterator.next();
            listener.connectionClosed(event);
        }
    }

    void fireErrorOccurredEvent(Exception error)
    {
        ConnectionEvent event = new ConnectionEvent(this, ConnectionEvent.CONNECTION_ERROR_OCCURRED, error);
        Iterator iterator = listeners.iterator();
        while (iterator.hasNext())
        {
            ConnectionEventListener listnener = (ConnectionEventListener) iterator.next();
            listnener.connectionErrorOccurred(event);
        }
    }
}

/**
 *
 * Copyright 2007 (C) The original author or authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.livetribe.boot.http;

import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.io.ByteArrayInputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

import org.apache.ahc.AsyncHttpClient;
import org.apache.ahc.codec.HttpRequestMessage;
import org.apache.ahc.codec.HttpResponseMessage;

import org.livetribe.boot.protocol.BootServer;
import org.livetribe.boot.protocol.BootServerException;
import org.livetribe.boot.protocol.YouShould;


/**
 * @version $Revision: $ $Date: $
 */
public class HttpClient implements BootServer
{
    private final URL url;
    private int timeout;

    public HttpClient(URL url)
    {
        if (url == null) throw new IllegalArgumentException("URL cannot be null");
        this.url = url;
    }

    public int getTimeout()
    {
        return timeout;
    }

    public void setTimeout(int timeout)
    {
        this.timeout = timeout;
    }

    public YouShould hello(String uuid, long version) throws BootServerException
    {
        try
        {
            URL hello = new URL(url, "hello/" + uuid + "/" + version);
            AsyncHttpClient ahc = new AsyncHttpClient();
            FutureResponse<YouShould> response = new FutureResponse<YouShould>(new FutureAhcCallback<YouShould>()
            {
                @SuppressWarnings({"ThrowableInstanceNeverThrown"})
                public void onResponse(HttpResponseMessage message)
                {
                    try
                    {
                        InputStream in = new ByteArrayInputStream(message.getContent());
                        String line = new String(message.getContent(), "UTF8");
                        if (line.length() == 0)
                        {
                            setThrowable(new BootServerException("Empty message"));
                            return;
                        }

                        String[] tokens = line.split(" ");
                        if (tokens.length != 4)
                        {
                            setThrowable(new BootServerException("Unrecognized reply " + line));
                            return;
                        }

                        String command = tokens[0];
                        long version = Long.parseLong(tokens[1]);
                        String bootClass = tokens[2];
                        int numEntries = Integer.parseInt(tokens[3]);

                        YouShould youShould = new YouShould(version, bootClass, null);
                    }
                    catch (UnsupportedEncodingException uee)
                    {
                        setThrowable(uee);
                    }
                }

                public void onException(Throwable cause)
                {
                    setThrowable(cause);
                }

                public void onClosed() { }

                @SuppressWarnings({"ThrowableInstanceNeverThrown"})
                public void onTimeout()
                {
                    setThrowable(new TimeoutException("HTTP request timed out"));
                }
            });

            ahc.sendRequest(new HttpRequestMessage(url, response));

            return response.get(timeout, TimeUnit.SECONDS);
        }
        catch (MalformedURLException mue)
        {
            throw new BootServerException("Unable to form URL for hello", mue);
        }
        catch (ExecutionException ee)
        {
            throw new BootServerException("Unable to send hello", ee.getCause());
        }
        catch (InterruptedException ie)
        {
            throw new BootServerException("Hello interrupted", ie);
        }
        catch (TimeoutException te)
        {
            throw new BootServerException("Hello timed out", te);
        }
    }

    public InputStream pleaseProvide(String name, long version) throws BootServerException
    {
        return null;  //todo: consider this autogenerated code
    }
}

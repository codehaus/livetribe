/**
 *
 * Copyright 2008 (C) The original author or authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.picateers.boot.servlet;

import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.logging.Logger;

import org.springframework.context.ApplicationContext;
import org.springframework.web.context.support.WebApplicationContextUtils;

import org.livetribe.boot.protocol.BootServer;
import org.livetribe.boot.protocol.BootServerException;
import org.livetribe.boot.protocol.ProvisionEntry;
import org.livetribe.boot.protocol.YouMust;
import org.livetribe.boot.protocol.YouShould;


/**
 * @version $Revision$ $Date$
 */
public class BootServerServlet extends HttpServlet
{
    private final static String CLASS_NAME = BootServerServlet.class.getName();
    private final static Logger LOGGER = Logger.getLogger(CLASS_NAME);
    private BootServer bootServer;

    public void init(ServletConfig servletConfig) throws ServletException
    {
        super.init(servletConfig);

        ApplicationContext applicationContext = WebApplicationContextUtils.getWebApplicationContext(servletConfig.getServletContext());
        if (applicationContext == null)
        {
            LOGGER.severe("Missing Spring application context");
            throw new ServletException("Missing Spring application context");
        }

        bootServer = (BootServer) applicationContext.getBean("bootServer");
        if (bootServer == null)
        {
            LOGGER.severe("Missing boot server");
            throw new ServletException("Missing boot server");
        }
    }

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException
    {
        if (request.getPathInfo() != null)
        {
            String[] tokens = request.getPathInfo().split("/");

            if ("hello".equals(tokens[1]))
            {
                try
                {
                    String uuid = tokens[2];
                    long version = Long.valueOf(tokens[3]);

                    YouShould directive = bootServer.hello(uuid, version);

                    PrintWriter writer = response.getWriter();

                    if (directive instanceof YouMust) writer.print("MUST ");
                    else writer.print("SHOULD ");

                    writer.print(directive.getBootClass());
                    writer.print(" ");

                    writer.print(directive.getVersion());

                    if (directive instanceof YouMust)
                    {
                        writer.print(" ");
                        writer.print(((YouMust) directive).isRestart() ? "true" : "false");
                    }

                    writer.println();

                    for (ProvisionEntry entry : directive.getEntries())
                    {
                        writer.print(entry.getName());
                        writer.print(" ");
                        writer.println(entry.getVersion());
                    }

                    response.setStatus(200);
                }
                catch (BootServerException e)
                {

                    e.printStackTrace();  //todo: consider this autogenerated code
                }

                if (!"f".equals(tokens[2]))
                {
                    response.setStatus(400);
                }
                else if (!"1".equals(tokens[3]))
                {
                    response.setStatus(400);
                }
                else
                {
                    PrintWriter writer = response.getWriter();

                    writer.println("SHOULD com.acme.Boot 2");
                    writer.println("com.acme.service.Foo 15");
                    writer.println("com.acme.service.Bar 1");

                    response.setStatus(200);
                }
            }
            else if ("provide".equals(tokens[1]))
            {
                if ("com.acme.service.Foo".equals(tokens[2]) && "15".equals(tokens[3]))
                {
                    PrintWriter writer = response.getWriter();

                    writer.println("HOW NOW BROWN COW");

                    response.setStatus(200);
                }
                else if ("com.acme.service.Bar".equals(tokens[2]) && "1".equals(tokens[3]))
                {
                    PrintWriter writer = response.getWriter();

                    writer.println("THE RAIN IN SPAIN");

                    response.setStatus(200);
                }
                else
                {
                    response.setStatus(400);
                }
            }
            else
            {
                response.setStatus(400);
            }
        }
    }
}
